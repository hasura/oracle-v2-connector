##################################
quarkusPluginId=io.quarkus
quarkusPluginVersion=3.1.0.Final
quarkusPlatformGroupId=io.quarkus
quarkusPlatformArtifactId=quarkus-bom
quarkusPlatformVersion=3.1.0.Final
##################################
# org.gradle.caching=(true,false)
# When set to true, Gradle will reuse task outputs from any previous build, when possible, resulting in much faster builds
org.gradle.caching=true
#
# org.gradle.configureondemand=(true,false)
# Enables incubating configuration on demand, where Gradle will attempt to configure only necessary projects. Default is false.
org.gradle.configureondemand=true
#
# org.gradle.parallel=(true,false)
# When configured, Gradle will fork up to org.gradle.workers.max JVMs to execute projects in parallel.
# To learn more about parallel task execution, see the section on Gradle build performance. Default is false.
org.gradle.parallel=true
#
# The org.gradle.jvmargs Gradle property controls the VM running the build.
# It defaults to -Xmx512m "-XX:MaxMetaspaceSize=256m"
#
# The below "--add-opens=" flags are so that Snowflake doesn't error on query results
# Snowflake by default uses Arrow as the memory format and Arrow uses Netty's Unsafe allocator API
# In JDK +17, this causes errors: https://github.com/snowflakedb/snowflake-jdbc/issues/589#issuecomment-1179074651
org.gradle.jvmargs=-Xmx2g -XX:MaxMetaspaceSize=512m -XX:+HeapDumpOnOutOfMemoryError -Xverify:none \
                   -XX:+UseParallelGC -XX:+TieredCompilation -XX:TieredStopAtLevel=1 -Dfile.encoding=UTF-8 \
                   --add-opens=java.base/java.lang=ALL-UNNAMED \
                   --add-opens=java.base/java.lang.invoke=ALL-UNNAMED \
                   --add-opens=java.base/java.nio=ALL-UNNAMED
#
# https://kotlinlang.org/docs/whatsnew17.html#a-new-approach-to-incremental-compilation
kotlin.incremental.useClasspathSnapshot=true
